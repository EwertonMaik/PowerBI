# DAX - Data Analysis Expressions - Coleções de funções, operadores e constantes usados em formulas e expressões.

# Possuem funções de Agregação, Contagem, Lógicas, Informações, Texto, Datas e Inteligência de Tempo.
SUM =SUM(Coluna) - Soma de Números ou Colunas
AVERAGE =AVERAGE(Coluna) - Cálcula a média de números ou colunas
MAX =MAX(Coluna) - Calcula maior valor de uma lista ou coluna
MIN =MIN(Coluna) - Calcula menor valor de uma lista ou coluna

Funções de Agregação Iterativas

SUMX = SUMX(Tabela; Expressão)
AVERAGEX = AVERAGEX(Tabela; Expressão)
MAXX = MAXX(Tabela; Expressão)
MINX = MINX(Tabela; Expressão)
COUNTX = COUNTX(Tabela; Expressão)

fDados_Completa = UNION(fDados;f_2018) -- Usando UNION para criar uma nova tabela que junta dados de duas tabelas distintas
_Medidas = {1} - Criando uma tabela para adicionar todas as minhas medidas / colunas calculadas

COUNT - =COUNT(Coluna) - Conta quantos números tem em uma coluna
COUNTA - =COUNTA(Coluna) - Conta quantos valores tem em uma coluna
COUNTBLANK - =COUNTBLANK(Coluna) - Conta quantos valores vazio tem em uma coluna
COUNTROWS - =COUNTROWS(Coluna) - Conta quantas linhas tem em uma coluna
DISTINCTCOUNT - =DISTINCTCOUNT(Coluna) - Conta quantos itens diferentes tem uma coluna

Funções de Data
DAY - DAY(coluna)
MONTH - MONTH(coluna)
YEAR - =YEAR(coluna)
TODAY - =TODAY()
WEEKDAY - =WEEKDAY(Coluna:[Tipo])
WEEKNUM - =WEEKNUM(Coluna:[Tipo])
HOUR - =HOUR(coluna)
MINUTE - =MINUTE(coluna)
SECOND - =SECOND(coluna)
NOW - =NOW()
DATEDIFF =DATEDIFF(DTVendas;DTVenct;Tipo) - Diferença entre uma data e outra, aceita varios argumentos.

1 D_CALENDARIO = CALENDAR(MIN(Fato_venda[Dt_Venda]);MAX(Fato_venda[Dt_Venda]) -- Criando uma tabela com uma coluna que pega a data minima e data maxima da tabela / campo informado
1 Mes Abrev = FORMAT(D_CALENDARIO[Data_ref];"mmm") -- Criando uma coluna com Nome do mês abreviado
1 Mes Abrev = FORMAT(D_CALENDARIO[Data_ref];"mm") -- Criando uma coluna com Número do mês
1 Mes Abrev = FORMAT(D_CALENDARIO[Data_ref];"mmmm") -- Criando uma coluna com Nome do mês Completo
Mês/Ano = FORMAT(D_CALENDARIO[Data_ref];'mmm/yyyy') -- Criando coluna personalizada de mês descrito abreviado / ano número
Mês/Ano = FORMAT(D_CALENDARIO[Data_ref];'mm/yyyy') -- Criando coluna personalizada de mês número/ ano número
Mês/Ano = FORMAT(D_CALENDARIO[Data_ref];'mmmm/yyyy') -- Criando coluna personalizada de mês descrito por extenso ano número
1 Quarter = OFRMAT(D_CALENDARIO[Data_ref];"Q")& "º Trim" -- Criando uma coluna de Quarter
1 Sem = IF(D_CALENDARIO[mes]<=6; "1º Sem"; "2º Sem") -- Criando coluna calculada para semestre
1 Dia Semana Ext = FORMAT(D_CALENDARIO[Data_ref]; "ddd") -- Criando coluna dos dias da semana por extenso abreviado
2 Dia Semana Ext = FORMAT(D_CALENDARIO[Data_ref]; "dddd") --Criando coluna dos dias da semana por extenso completo
1 Idade -DATEDIFF(PESSOAS[Nascimento];TODAY();YEAR) -- Criando culuna para calcular idade das pessoas por ANO
2 Idade -DATEDIFF(PESSOAS[Nascimento];TODAY();DAY) -- Criando culuna para calcular idade das pessoas por DIAS
1 Idade -DATEDIFF(PESSOAS[Nascimento];TODAY();MONTH) -- Criando culuna para calcular idade das pessoas por MÊS
É possivel por HOUR / MINUTE / QUARTER / SECOND / WEEK

Calendario = CALENDARAUTO() -- Função DAX que criar uma coluna para a tabela automaticamente com todas dadas de inicio e fim que o modelo possui

# PorwerBI permite criar uma Hierarquia de datas automaticamente e manualmente, adicionando uma data, e as demais variações de colunas criadas para esta data, como dia, mês, trimestre, semestre.

# O PowerBI permite a ordenação dos dados de calendário de forma crescente e descresente para dia, mês, ano e demais classificação de datas.

# O PowerBI permite a reutilização de métricas e medidas, dando agilidade 

# Podem ser usadas em colunas ou métricas.

# Colunas consomem memória e Métricas consomem CPU.

# Tabelas com nome composto e espaços, deve estar entre ASPAS SIMPLES ' '. Quando não houver espaço, não é necessario ASPAS.

# O nome das colunas sempre utilizar COLCHETES.

# Operadores Matemáticos Utilizados +, -, *, /, ^, &

# Operadores de Comparação =, <, >, <=, >=, <>

# Operadores Lógicos &&, ||, IN

# Medidas são usadas para várais análises de dados; somas, médias, valores mínimos ou máximos, contagens ou cálculos mais avançados.

# Contexto de Linha - operações aplicadas em linhas para determinado cálculo.

# Contexto de Filtros - Utilizado pelas medidas, ao aplicar filtro em uma ou mais tabelas.


## Funções DAX Lógicas
IF - IF(Vendas[Desconto] > 0; "Com Desc.", "Sem Desc" )
IFERROR - IFERROR(Fvendas[Preco] / Fvendas[Qtd], 0 ) - Trata um erro, substituindo o erro por um valor
AND - AND(FVendas[Preco] > 20000, Fvendas[Desconto], Anual < 500)
OR - OR(FVendas[Preco] < 20000, FVendas[Desconto] > 500)
TRUE - TRUE()
FALSE - FALSE()
SWITCH(<espression>, <value>, <result> [,<value>, <result>]... [,<else>])

Media = DIVIDE(Alunos_notas[P1] + Alunos_notas[P2]; 2; 0)
Media = IFERROR((Alunos_notas[P1] + Alunos_notas[P2]) / 2; 0)
Media = (Alunos_notas[P1] + Alunos_notas[P2]) / 2

situacao = IF(Alunos_notas[Media3] >= 6; "Aprovado"; "Reprovado")
Idicador = IF(Alunos_notas[Media3] >= 6; "(inserir emoj)"; "inserir emoj") -- Pressionando a tecla (Windows) + (Ponto) aparece teclado virtual de EMOJ
Regra = SWITCH( TRUE(); Alunos_notas[Media3] >= 7; "Aprovado"; Alunos_notas[Media3] >= 5; "Recuperação"; "Reprovado")
Performance = SWITCH( TRUE();
                      Alunos_notas[Media3] >= 9,5; "Excelente";
                      Alunos_notas[Media3] >= 8,5; "Otimo";
                      Alunos_notas[Media3] >= 7; "Bom";
                      Alunos_notas[Media3] >= 5; "Regular";
                      Alunos_notas[Media3] >= 2,5; "Ruim";
                      "Pessimo"
                      )


Tipo de Bolsa = SWITCH (
						TRUE();
						('Bolsa Estudo'[Idade] >= 16 && 'Bolsa Estudo'[Média Notas] >= 9 && 'Bolsa Estudo'[Frêquencia] >= 90); "Bolsa Completa";
						('Bolsa Estudo'[Idade] >= 16 || 'Bolsa estudo'[Média Notas] >= 9 || 'Bolsa Estudo'[Frêquencia] >= 90); "Bolsa Parcial";
						"Não Tem"
						)

Bonus1 = IF (
	AND(Bonus[Tempo(ano)] >= 4; Bonus[Desempenho] = "Bom"); "Elegivel"; "Não Elegivel"
)

Bonus2 = SWITCH (
	TRUE();
	//(Bonus[Tempo(ano)] >= 4 && Bonus[Desempenho] = "Bom"); "Elegivel"; -- Usando (&&) que é a mesma coisa que AND
	AND(Bonus[Tempo(ano)] >= 4; Bonus[Desempenho] = "Bom"); "Elegivel";
)


## Funções DAX Contexto de Linha - Filtros

M Total Vendas = SUMX(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_Unit] )-- Exemplo de Função Agregação Iterativa, porém sem filtro
M Vendas Validas =CALCULATE(sumx(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_Unit]); Fato_venda[Situacao] = "N") -- Com Filtro por Linha
M Vendas Cancel =CALCULATE(sumx(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_Unit]); Fato_venda[Situacao] = "C") -- Com Filtro por Linha

Funções de Filtros
=CALCULATE(SUM(FVendas[Qtd]); FVendas[Situacao] = "N" ) -- Calcula uma expressão com um filtro 
=FILTER(Fvendas; Fvendas[Situacao] = "N") -- Filtra uma tabela com varios critérios
=ALL(FVendas) -- Exclui qualquer filtro de uma coluna
ALLSELECTED(FVendas) -- Remove filtros de contexto de colunas e linhas na consulta atual

00 Venda Geral = CALCULE(SUMX(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_Unit]))
01 Vendas Valid = CALCULATE(SUMX(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_Unit]); Fato_venda[Situacao] = "N" )
01 Vendas Velid = CALCULATE([00 Vendas Geral]; Fato_venda[Situacao] = "N") -- Reutilizando a medida utilizada em 00 Venda Geral
02 Vendas Cancel = CALCULATE([00 Vendas Geral]; Fato_venda[Situacao] = "C") -- Reutilizando a medida utilizada em 00 Venda Geral
03 Vendas ALL = CALCULATE([01 Vendas Valid]; ALL(Fato_venda) )
04 % Partic = DIVIDE([01 Vendas Valid]; [03 Vendas ALL] )
05 Vendas ALLSELECTED = CALCULATE([01 Vendas Valid]; ALLSELECTED(Fato_venda) )
06 Vendas C/ Vnd = CALCULATE([01 Vendas Valid]; Fato_venda[Cod_Vend] <> BLANK() )
06 Vendas C/ Vnd = CALCULATE(SUMX(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_Unit]); Fato_venda[Situacao] = "N"; Fato_venda[Cod_Vend] <> BLANK() )
06 Vendas C/ Vnd = CALCULATE(SUMX(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_Unit]);
								FILTER(Fato_venda;
									Fato_venda[Situacao] = "N" && Fato_venda[Cod_Vend] <> BLANK()
								)
							)
07 Venda S/ Vend = CALCULATE([01 Vendas Valid]; Fato_venda[Cod_Vend] = BLANK() )
08 Qtd Ln S/ Vend = CALCULATE(COUNTROWS(Fato_venda); Fato_venda[Cod_Vend] = BLANK())
09 Qtd Ln C/ Vend = CALCULATE(COUNTROWS(Fato_venda); Fato_venda[Cod_Vend] <> BLANK())
10 Qtd Vnd Normal = CALCULATE(CONTROWS(Fato_venda); Fato_venda[Situacao] = "N" )
11 Qtd Vnd Cancel = CALCULATE(CONTROWS(Fato_venda); Fato_venda[Situacao] = "C" )
12 Custo Venda = CALCULATE(SUMX(Fato_venda; Fato_venda[Qtde] * Fato_venda[Pr_custo]); Fato_venda[Situacao] = "N" )
13 % Lucro = DIVIDE([01 Vendas Valid]; [12 Custo Venda] ) - 1
14 Lucro Bruto = ([01 Vendas Valid] - [12 Custo Venda])
15 Valor Meta = CALCULATE(SUM(Fato_venda[Valor_meta] ) )
16 % Meta = DIVIDE([06 Vendas C/ Vnd]; [15 Val Meta]; 0)
16 % Rest = IF(1 - [16 % Meta] < 0; 0; 1 - [16 % Meta] )

-- DAXSTUDIO
-- CALCULANDO PERCENTUAL DO TOTAL DE - VENDAS
Soma de Vendas = SUM(fVendas[Valor]) -- Medida que soma todas as vendas e sofre atualização do valor conforme o filtro selecionado

Soma Todas Vendas = CALCULATE([Soma de Vendas]; ALL(fVendas) ) -- Medida que soma todas as vendas e não sofre atualização de filtro selecionado, pois usa ALL

% Total = DIVIDE([Soma de Vendas]; [Soma Todas Vendas]; BLANK() ) -- Medida que Divide a (Soma de Vendas) que aceita seleção de filtro, pela (Soma Todas Vendas), que não aceita seleção de filtro. 

-- CALCULANDO PERCENTUAL COM FILTRO SELEÇÃO
Soma Vendas Selecionadas = CALCULATE([Soma de Vendas]; ALLSELECTED(fVendas) ) -- Media que soma todas as venda, e sofre atualização conforme os filtros selecionados.


% Total Selecionado = DIVIDE([Soma de Vendas]; [Soma Vendas Selecionadas]; Blank() ) -- Medida que divide a (Soma de Vendas) pela (Soma Vendas Selecionadas), ambas medidas possuem atualização conforme filtros selecionados.

-- Função USERELATIONSHIP, usada para relacionar uma coluna de uma tabela, com a coluna de outra tabela. Importante que as tabelas tenham ao mínimo, um relacionamento desativado.
-- Função não retorna nenhum valor, usada para relacionar os registros que tem relação e realizar cálculos e operações.
USERELATIONSHIP(TabelaA[coluna01], TabelaB[coluna02]);
= CALCULATE(SUM(InternetSales[SalesAmount]), USERELATIONSHIP(InternetSales[ShippingDate], DateTime[Date]))

-- Exemplo abaixo usando CALCULATE e DIVIDE + MAX
-- A medida calcula a média para cada mês automaticamente, pegando o mês referênte ao faturamento total
calculo_media_automatico_por_mes = CALCULATE(DIVIDE([fat_total], MAX(d_calendario[mes]), BLANK() ) )

-- Exemplo de utilização da Função RANKX
-- É usado para gerar um classificação, um ranqueamento de um conjunto de dados de uma tabela
Rankx(All(Vendasd[Produto]); [Vendas]; ; DESC)
Vendas ACC = CALCULATE([Vendas]; TOPN([Rank]; All(Vendas[Produto]); [Vendas]; DESC ) )
%% ACC = [Vendas ACC] / CALCULATe([Vendas]; ALL(Vendas[Produto]) )

-- Exemplo de aplicação de Variáveis, RANKX, IF e ISINSCOPE para ranquear valores dentro de um Visual de Grafico Colunas de Barras

Recentemente utilizei a Função RANKX para gerar um classificação de 1º, 2º, 3º... para um grupo registro em uma tabela. A função atendeu perfeitamente!
Porém precisei criar uma medida para ranqueamento / classificação dentro de um Gráfico Visual de Barras que faz Drill Down e Drill Up em três niveis.
E está função RANKX apenas, não funciona e gera a classificação em todos os níveis corretamente, em resumo apenas um nível que chega de gerar a classificação correta,
e nos demais não. Isso porque a função RANKX é necessário informar a tabela e as colunas que fará parte do ranqueamento.
Para que a função RANKX funcionasse corretamente dentro de um Grafico Visual de Barras com Drill Down e Drill Up, tive que desenvolver um medida usando 3 variáveis,
onde cada uma recebia o cálculo de RANKX para uma determinada situação do Nivel no Visual de Gráfico de Barras.
E usando uma estrutura IF, e em especial a função ISINSCOPE para verificar em qual escopo, em qual nivél esta do Gráfico de Visual de Barras.
Assim, usando o IF, verifico com ISINSCOPE em qual nível das colunas o Gráfico esta, e é chamado e executado a váriavel da respectiva função RANKX.
